AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ApplicationName:
    Type: String
    Description: Application Name
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  KubernetesVersion:
    Type: String
    Description: Kubernetes Version
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet Ids
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public Subnet Ids
Mappings:
  ServicePrincipalPartitionMap:
    aws:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-cn:
      EC2: ec2.amazonaws.com.cn
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
    aws-us-gov:
      EC2: ec2.amazonaws.com
      EKS: eks.amazonaws.com
      EKSFargatePods: eks-fargate-pods.amazonaws.com
Resources:
  ClusterSharedNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between all nodes in the cluster
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}/ClusterSharedNodeSecurityGroup'
      VpcId: !Ref VpcId
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker nodegroups
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VpcId
  IngressDefaultClusterToNodeSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: >-
        Allow managed and unmanaged nodes to communicate with each other (all
        ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      ToPort: 65535
  IngressInterNodeGroupSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow nodes to communicate with each other (all ports)
      FromPort: 0
      GroupId: !Ref ClusterSharedNodeSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  IngressNodeToDefaultClusterSG:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: Allow unmanaged nodes to communicate with control plane (all ports)
      FromPort: 0
      GroupId: !GetAtt ControlPlane.ClusterSecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref ClusterSharedNodeSecurityGroup
      ToPort: 65535
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EKS
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSClusterPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSVPCResourceController'
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}/ServiceRole'
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: prod
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt ServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: !Ref SubnetIds
  PolicyCloudWatchMetrics:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'cloudwatch:PutMetricData'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${ApplicationName}-PolicyCloudWatchMetrics'
      Roles:
        - !Ref ServiceRole
  PolicyELBPermissions:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'ec2:DescribeAccountAttributes'
              - 'ec2:DescribeAddresses'
              - 'ec2:DescribeInternetGateways'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${ApplicationName}-PolicyELBPermissions'
      Roles:
        - !Ref ServiceRole
  ClusterOIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
      Url: !GetAtt ControlPlane.OpenIdConnectIssuerUrl
  myAmazonEKSCNIRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Effect: Allow
            Principal:
              Federated: !Ref ClusterOIDCProvider
#            Condition:
#              StringEquals:
#                'rds:DatabaseEngine': mysql
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}/NodeInstanceRole'
  myAmazonEKSNodeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - !FindInMap
                  - ServicePrincipalPartitionMap
                  - !Ref 'AWS::Partition'
                  - EC2
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy'
      Path: /
      Tags:
        - Key: Name
          Value: !Sub '${ApplicationName}/NodeInstanceRole'
  NodeInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref myAmazonEKSNodeRole
  VpcCni:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      ClusterName: prod
      ServiceAccountRoleArn: !GetAtt myAmazonEKSCNIRole.Arn
#  NodeGroup:
#    Type: 'AWS::AutoScaling::AutoScalingGroup'
#    Properties:
#      DesiredCapacity: '3'
#      LaunchTemplate:
#        LaunchTemplateName: !Sub '${AWS::StackName}'
#        Version: !GetAtt NodeGroupLaunchTemplate.LatestVersionNumber
#      MaxSize: '3'
#      MinSize: '3'
#      Tags:
#        - Key: Name
#          PropagateAtLaunch: 'true'
#          Value: someCluster-default-nodegroup-Node
#        - Key: kubernetes.io/cluster/someCluster
#          PropagateAtLaunch: 'true'
#          Value: owned
#      VPCZoneIdentifier: !Ref PublicSubnetIds
#    UpdatePolicy:
#      AutoScalingRollingUpdate: {}
  NodeGroupLaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: false
              Iops: 3000
              Throughput: 125
              VolumeSize: 80
              VolumeType: gp3
#        IamInstanceProfile:
#          Arn: !GetAtt NodeInstanceProfile.Arn
        ImageId: ami-0d6825764cde5b078
        InstanceType: t2.medium
        MetadataOptions:
          HttpPutResponseHopLimit: 2
          HttpTokens: optional
        NetworkInterfaces:
          - DeviceIndex: 0
            Groups:
              - !Ref ClusterSharedNodeSecurityGroup
              - !Ref SG
            NetworkCardIndex: 0
        UserData: >-
          H4sIAAAAAAAA/6x7e3PiOLP3//kUetmpp3YrY8DGJsCzeesYcAgTLuGS6549KWEL4+DbyDK3OTmf/ZRsA7ak2c1Wnd2qmUJudbf68utujf2L6QaxJZmBv3TsixCaa2ijqAX82HUvcOybntW6kIAEKhuIK66zqCQbKpGJnZBEFbSOTOJWFkFAIoJhWIauUo5WF1vsEPS2dFwU0f1m4BPkkxb47wsAAPgFpPukKESms3RMEO0jgjwLWDgIJccHse8QsAwwWMcL5CLyNfmhe/AQ+GDg+PEOKOBXfaD8dpFw/GOG8MYx0Z8Z/0FgQhd4iEALEghCiKGHCMJRC0yNXn88+gr0p9lb17jRHwbzt3Qt2Wv4GwcHvod8cuO46LqCiHk85pFfGfmbTFDPDRbQBdC3QEQgccyCrM7gYTY3pm/d0ewrGI27xttAbxuD44+53h/NZ38rNrNBTmp6PD/wJYHQhHX//ivoj2ZzfdQx3vrdT8twKedEUrplh8wZgZhcMz8rcYQrC8c/bgT/mRAAIEl+YCHJCa+//Mg0+WAfunCB3OhIkJrk4yt0wxUsp/qUnaDi+BGBvokkx7r+8iN3mDw/D+6kMLAos6H+/HY/7s7yjzGynYggnMi9JjhG+cWtQ1YSgY5PTsqkLsmzSDMkxMHGsRC+htso/zDw6X6EJRz7xPHQtRWYa4TzJ0ZkG+C1FLqx7fjXpu/k9/uOtHB8yXLwdSUIScX0HWpWhoTmZ0pDXUZpfETKVo4qDCzJ8ZcY5lRyPGij6y8/aKQbd7M3ozN90zud8cNo/lG21riMTFxOHxcT4SNbnRnTx37HmL11x0O9P/qgwVIJYRyhVq1ck9A6WsSOa5XlnCI0HlI44eIrXS7voecWTSgipsFIKS8ACLY+wi2Ag4C06B8XAISQrFog2ZNBR/b3aW+UAkLZqshVqqnpkgScqDjKAGHPiSIn8KMWKFXrqloq4JSU6Meb5hrF0hZFRKqdCKhpj4k+0ofGdRR4qOPGNMQKRMaoez/uj+bXK0LCqFWpNGp6Xa82tPqVITfUeq1z067Xm9XGlarVtZt2u7x31fJJIE2NMkwgEG6jshl4Re5n717Xq4palWW1pmrK3xpQDG6fM1Auga/Z/DVTE0g+9FDeJlyi09y0cRCHKamFljB2iXRaPktKs/P6s0cqAuffnSgRAy0LoyhqgWo5+T9dDJ1HhOnO1rEglbNgXjcieoSNvEAEyil1TFbIJ44JCd2RBTr0A3/vBXF0XAAA+XDhIqsFltCNULa8RYtVEKzPVCY0V2g+H7SA4lUjfjMFtWx1p1WbuY2ug3zS0SnWF+1iwrKJyUnZADuHgq5eYKEWeEo1+Uu99Gw7shINtbyGCcGDD4sktYzCTFzbxc6G+jFL4vRJGibd0SwVJgG5Wpar1B1ytUAReNDxW8efae1KCJYIkhijHiToZO9pQCBBd6n7aLuAcAdhQtsPSFDOjmvHt1ogI+wkbo5xYp/0cbxAU0ThBVlH3mYYt8BV1ct+onCFPIShK0UkwNBGLSD3nKNxkRfgfQuoqjJM1xJeeD6YtY9t1EmbfxTmGVx+Ks4l+l/b6PVHoGNM5/2bfkefG8lq8nzY73f23U5HX3Rsfdtv63a/rXf1Udtef1+tnV5zW23rk+hG7+qPw+lwa0xeuo+TSdfYhth6+pa6wfQ01+o9HoZt9bk77++G3fVudND3w/eH/dANnrvzYbo2P61tb+bGfNg2err8YKT4thvewdqj8/r8LX59nrrmodPRZ/1td/Ly7S547a825kifGO32RO/atnGvU60nQce2jbY+ujwkTFZXk3A/GavV58aoc3UbT5u71fD1tvrUN8kg2n+X59rA3j93nXDSdl8VJ5704cvBXbuK1m+seldpVD0Y1u16UEV7k6xr82ncv5/hunHX0d6d7/14PbH9u9e98+j2bgZ33ddv7WAV9vFoc/DbB20xfUmYtJuYjKczXe9C3GtfmvtInytK8B4M9ooeVL7LTbJfNRvR1WUwivHy/jYcty8bbaTLs1G0xfcJk8f6qnLTm6qW4iqW2mx2Ry8P3y9f7prjZt9btG+Ml4fXvrLv75Y1ZWq+fx/Aebho7uC7MerFg0PqndeZtu/eTbu918M4eqiuZr36pKrBzurS3Q2rL/Vl/24S3W3reKxc4mZl2As63lO902zC+m7bRSmT95VhH8L3dW3R697WlFXlcd3Rt4auw+H7sGNsu/ZL93Favdcnt5W2Punq9t16qDeoey1ja7QTJpXt5GaoD9v6ssG6dZC5ta0PF8YTrk/mcBFuFtPvo/kSTbbxbbi5rCRM7iq76VPFuhtMDupybhv9ystGVRbjSlj149EG7g/aZvb+hF0oP73Plcnq8lVpj6vLudxsfnvs9FNNnoynw8QxRlOsvXRvD4/ORnV2KBo33oPNt61S+7abTu8G3uH7+wB6o2lQfZzbwUqJ672hcdW/TV08r+t48P3eGG+ijd+XN4eHx63qDdYV3BgevimHWwwvzel9rylfdjahGU+b3eHS9iuPL4HfbzwlTKpVe0m0O0utbW8aFuzLE6MZamMdmiPl8vm1WZuseoZ1d+P3bhDsmOvgmxaNY2Kr1vgqOARp7jQfZs3t2L7r36q6pVl7f4p73mDR6406o2/GN2s0IARP7iv10e2iOr+5H0yf/VG86L/UXq7PMGGMuiKQ+BQ2nUrN56pvrtBu5DzWR8dakP3O1aEziEtZrSH7n9a7M962wP9pGwYAbV5aINfoFPekzU56JnrqHTmfKf2dL93pIT/Fjf4XR5Q6KwT/8bldqb7/ZI8ZY4x8Ih31/Ueb07Ka1tNkIcRoiTDyTRS1wI+Pi+M5Tmb55wpmhjg3STtknn8V4yttj8rFbu3czyVNqpzfi+0oz0sCaB0VftuISCRYI7+wSifIcyNceMQOCuctdEQNinyKg0cWJ4HnQWpWuM2rgvxNUdPUkslIN59lk4w+OA0ksxwxABvoxqgFUhXg3w9g4gnvsymP1bKycyG2EdAaycpOsa2yXM8Wr2pp8TU1aJXpjOKeljzN51YOfrmW7VRqarpYt61yttRMVohykqmqGXeGxKPiOCWS1QbDP9HXQ5YTeyA9gVm3/XLxUJ5m+exBsbZg9Dc1WJYVhn/CjVvFNUZhhZXIElANiivUMCrDN6xRRVXW+jXu2Da/tJK5I9ZFvjzI1vlAx0Ws8faB/F6scWFw9qYsH63N6eZpkLXHwRdooXI7k8grambV0MnB2Uzi0KWiYsnhmdiWEXtKryZQnzsjZcUqhjUmrGuMNJOLfJNXycrJb2R8IENDHVbnpPtc8GCRmvTMu6IWKqMV5/rE5oy7uFwXREdipyJdyCYGDStOmghwLD7rnJzjs82xVCcLORMqq1enM9e4lKUZyFqH1I7YIadbiWqXfegH4PRcYQUq6lniSV2KEgUUshUu1DTeO1Qcr4DnmPioga1aAvzxNN771GnsInUTH7isdykUshCdM4KpMUZ3ePBJXFMToC4PnZoAZLmUs9i4sWpMyuMad9qkFrCLpsbGTJKGrHNUHotVi4diGr4sIZS5cgN5AdQY7E7HX8pnGTVFPjqXd3jdLsYXhQlR6S4uwWOgnqzB6mqKyhDmwh6z8mmOySwq0VTmaqrAJQmzPJlT4yGXxXNtIfCtwEVLrg46XC5S7RtsUCOmQocKf0KKu3xx89l84jPdVDnY47NVLctVjrnFxm/Ie4cnwnzfpdrlyIOuC2T55K3ipgRsdnwrxrBWRY3BggN6UfZTmVxmQIEXPXHaFmLQk0/gqZx7Fl5kuSmIG0FQ8l5L2hRRDLAVk00PTxFgsfCYB65xEWI22z7ShGQlxJLcENQmrsc3hX1h2iRzvWfd5mOZr/NJvW4Iijgb9Hwfzme6CJJMrqHmq5gojpLKzLmVTUYPmixSeixS0vzJgFo7YxsvUPP5eKvbrMC6LSyNYv35UBL2BAcOh36SgcLQZLOS85Qn2EmrOd+7/WSMKijn8BmCuXjBHApgDgVM0ViYoDmbuJ4QvC1+jhXkQajwScn3DFhU5U12MvA44KUOEGCqQA+aLhwlqbHILopLyEYHG+Cnnks9zg58AUyajAIfmuVswCcjGjPYOKwZsABaiFLMMVIrtOMqm0dOXtB5puNnDoZmFcl8zNBujI8ZURoIcJxWOy4T+AhJopVLj8Rep9XG6c5AcGXAHI1vxbFoNuDvPyw+/6wzM+009wl6TLZeCU6Oudsh2nKpXMAVhx9bzaVyDoh4vDpwVzzCmkbbElG25CcsOl6LBmDem5iPGU/lU8Ti2k2LB4/kqNxW7zSbV89hxZVftu0x2QY0vbTizi0Xzu2JkMQTzEaJEflatRBNR8K7QyYSljlYqTWP91mRAB34AsypxgUjB+eUEeuPfHXIr506mNNUyCa/LGo6+LDO2dnkUsGu8VZKR8GjVU4tdFEaDVW+71IETTxb0bjaK6iD4qlTcGXCIDTMis9p5GSzib/VW8niu0UuotLraFYvagfhRXOhMcDCLKaBy0GmIOrpuXKlJ1FE2AjzvY4pMq9gMvGE27Fg4mITnCpX8EIsNfl7MJMbFD3B+MXlGbUuE+QCNXcyf8eWXlYxibWS+XsP/u7GFkAkT+VwJ3LYuUBmo5FpVvhqYp3lnBJPUFUXogs9USfN25eFDM68gkZvyZstMe/J5rk5iNOixlQIT9Cme8K6LQxJGm7FSp1UGM4VSDBvpB0ae7qEI1OEGdQQTUgJShZ9lSSmCN8ZnybGU3dsQyW6R+XVhbwzTI2NLNGl30Hw7058geXnaShzQ44IUwS+Ss7Z4BpgAXhpgoldYJCkUxEYjjlEWBPclnGdODt4Y/FNjOAGj0t7PnZVQV5xVLEkKwKoFDf1gjmQb7hNUSOF2bSnyMPZG4uCnCjFaQ4L/Wzy6GiyMldsw/q5d1Hh7i0MrKjswfCz/5D8I/kTgNICO5aNSi1Q8gMflb4e19EOmVIQkqjUAn9kiwCUfEicDSqn7yNayfuI19nriKWM6s8TDzewpZSG8n+PAl9aOm5OCCXIZPw4y/DgToqcQ6KUXPVO5NmjhEXy6Cjx48zQ2SAJo4gEmNIQHKPTM7rXDPzjaxlWsPXdAFpUePZPFB9/a/H0ffWKBZEX+GV6os8a/Jf/l3wAsIDRKv1YIEIESAFAGKOdQ/JLoROiJXTc/JofxH6ESLp1GfsmcQIf2Ii8Hb3/628nG25XjosARtACx88C3sg+RIDS/RtY5zdhnCUAf/wBSl9+FAg/SuD6mq7KHyXw55/gX//KqCgD+vB/wH/9UZWaf15+oY//Dciq8B4HMlcByKhzyxiRGJ/plseXPK3AR+D3v4pp6pvUjOAhQqA/7M42CiABtcDpw5WEYD6+M0bXpS+/mjF2gSRFjot8AqRncP8wB9ItKD1LcBtJyFSk48b0PRSJEFeKkBn4VtQC9Wq1lLzz1KpU5HqzrGh0ckz+rriQoIhUYOhUkp2/lQRuyXjn3MJo9BeqtMCX5BwlUPprFeg2ie6rfJFLeTtlH5NQQ+S1Aclbv5ITbtRM6dyXIhxx7psSlnr+cm/8nJ7GULZD8GUEty/7+iCqWMk7yr+VLrIUCWJsop+9pA5+AWTlRMCEPgg2CGPHQuD4WctFUd1B/8bovHQGf6Gz6yyRZO5N96h5/m39EvP1TfphjrNEyYb8BzcnSR/HU5iQgP8vPMTp8yHw++/G+KbguPP3QJybip/3CPySI6C/P37qCPGHKwn50ZC5T4VaUma7LDcpIBQFlX774ExXtFzymJ41dXBSOUzighRRJYwoJDPP0pf3j6+2MQ8jAjHJPfs5fv+zb/I4WL/StNLF/wYAAP//F57BEQI4AAA=
      LaunchTemplateName: !Sub '${AWS::StackName}'
      Tags:
        - Key: Name
          PropagateAtLaunch: 'true'
          Value: prod-default-nodegroup-Node
        - Key: kubernetes.io/cluster/prod
          PropagateAtLaunch: 'true'
          Value: owned
  SG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: >-
        Communication between the control plane and worker nodes in group
        default-nodegroup
      SecurityGroupIngress:
        - Description: >-
            [IngressInterCluster] Allow worker nodes in group default-nodegroup
            to communicate with control plane (kubelet and workload TCP ports)
          FromPort: 1025
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
          ToPort: 65535
        - Description: >-
            [IngressInterClusterAPI] Allow worker nodes in group
            default-nodegroup to communicate with control plane (workloads using
            HTTPS port, commonly used with extension API servers)
          FromPort: 443
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
          ToPort: 443
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: prod
      NodeRole: !GetAtt myAmazonEKSNodeRole.Arn
      LaunchTemplate:
        Id: !Ref NodeGroupLaunchTemplate
        Version: !GetAtt NodeGroupLaunchTemplate.LatestVersionNumber
      ScalingConfig:
        MinSize: 3
        DesiredSize: 3
        MaxSize: 5
      Labels:
        Key1: Value1
        Key2: Value2
      Subnets: !Ref PublicSubnetIds